module Final_Project2 (
    input clk,
    input clk22,
    input rst,
    input [3:0] btn,          // 按鈕輸入
    output reg [7:0] led_matrix, // LED 矩陣輸出（單行）
	 output reg [7:0] DATA_G,
	 output reg hit,                   // 命中訊號
    output reg [3:0] comm,       // 掃描訊號
    output reg [6:0] seg,        // 七段顯示器輸出
    output reg [1:0] COM         // 七段掃描控制
);

    wire clk_div;               // 分頻時鐘
    wire [1:0] rand_group;      // 隨機組號 (0~3)
    reg [7:0] matrix [7:0];     // 暫存 LED 矩陣
    reg [2:0] cnt;              // 控制列數 (0~7)
    reg [6:0] seg_table [0:9];  // 七段顯示表
    reg [6:0] score;            // 分數
    reg game_over;             // 遊戲結束標誌
	 reg [7:0] matrix_G [7:0];   //綠色陣列

    // 分頻器模組
    divfreq d1 (
        .clk(clk22),
        .clk_div(clk_div)
    );

    // LED 矩陣控制模組
    led_matrix_controller matrix_ctrl (
        .clk(clk),
        .rst(rst),
		  .gameover(game_over),
        .led_matrix(matrix)
    );
	 
	 integer i;
    // 初始化
    initial begin
        cnt = 0;
        score = 0;
        led_matrix = 8'b11111111;
		  for (i = 0; i < 8; i = i + 1) begin
            matrix_G[i] = 8'b11111111; // 預設全部熄滅
        end        
		  comm = 4'b0001;
        hit = 0;
        game_over = 0;
        COM = 2'b01;

        seg_table[0] = 7'b0000001; // 0
        seg_table[1] = 7'b1001111; // 1
        seg_table[2] = 7'b0010010; // 2
        seg_table[3] = 7'b0000110; // 3
        seg_table[4] = 7'b1001100; // 4
        seg_table[5] = 7'b0100100; // 5
        seg_table[6] = 7'b0100000; // 6
        seg_table[7] = 7'b0001111; // 7
        seg_table[8] = 7'b0000000; // 8
        seg_table[9] = 7'b0000100; // 9
    end

    // LED 掃描機制
    always @(posedge clk_div) begin
        if (cnt >= 7)
            cnt <= 3'b0;
        else
            cnt <= cnt + 1;
        // 控制掃描的列
        comm <= {1'b1, cnt};
        led_matrix <= matrix[cnt];
		  DATA_G <= matrix_G[cnt];
    end
	 


    // 按鈕檢查邏輯
    always @(posedge clk) begin
        hit <= 1'b0; // 預設為未命中
		  for (i = 0; i < 8; i = i + 1) begin
						matrix_G[i] = 8'b11111111; // 預設全部熄滅
					 end

        if (!game_over) begin
            if (btn[0] && matrix[0][0] == 0 && matrix[1][0] == 0) begin
                hit <= 1'b1;
					 matrix_G[0] = 8'b01111111;
					 matrix_G[1] = 8'b01111111;
                score <= score + 1;
            end
            if (btn[1] && matrix[2][0] == 0 && matrix[3][0] == 0) begin
                hit <= 1'b1;
					 matrix_G[2] = 8'b01111111;
					 matrix_G[3] = 8'b01111111;
                score <= score + 1;

            end
            if (btn[2] && matrix[4][0] == 0 && matrix[5][0] == 0) begin
                hit <= 1'b1; 
					 matrix_G[4] = 8'b01111111;
					 matrix_G[5] = 8'b01111111;
                score <= score + 1;
            end
            if (btn[3] && matrix[6][0] == 0 && matrix[7][0] == 0) begin
                hit <= 1'b1;
					 matrix_G[6] = 8'b01111111;
					 matrix_G[7] = 8'b01111111;
                score <= score + 1;
            end

            if (score >= 99) begin
                game_over <= 1'b1;
            end
        end
		  if(rst)begin
					  score <=0;
					  game_over<=1'b0;end
    end


    // 七段顯示器控制
    always @(posedge clk_div) begin
        if (!game_over) begin
            if (COM == 2'b01) begin
                seg <= seg_table[score % 10]; // 顯示個位數
                COM <= 2'b10;
            end else begin
                seg <= seg_table[(score / 10) % 10]; // 顯示十位數
                COM <= 2'b01;
            end
        end else begin
            seg <= 7'b1111111; // 遊戲結束顯示全亮
        end
    end

endmodule

module lfsr_2bit(
  input  wire clk,       // 用戶設定的時鐘信號
    input  wire clk22,     // 每秒5000萬次的高頻時鐘信號
    input  wire rst,       // 重置信號
    output wire [1:0] rand_out // 2位隨機輸出（範圍 0~3）
);
    reg [24:0] counter;   // 用來計算 `clk` 的計數器
    reg [24:0] counter2;  // 用來計算 `clk22` 的計數器

    // 用於生成隨機數的LFSR
    reg [24:0] lfsr;       // 2位 LFSR 寄存器

    // 計算器 1: 使用 clk22 進行高頻計數
    always @(posedge clk22 or posedge rst) begin
        if (rst) begin
            counter <= 24'b0;  // 重置信號，將計數器歸零
        end else begin
            counter <= counter + 1'b1;  // 每次 clk22 觸發，計數器加1
        end
    end

    // 計算器 2: 使用 clk 進行低頻計數
    always @(posedge clk or posedge rst) begin
        if (rst) begin
            counter2 <= 24'b0;  // 重置信號，將計數器歸零
        end else begin
            counter2 <= counter2 + 1'b1;  // 每次 clk 觸發，計數器加1
        end
    end

    // LFSR 隨機生成
     always @(posedge clk or posedge rst) begin
        if (rst) begin
            lfsr <= 24'b1;  // 初始 LFSR 值，設置為非零值
        end else begin
            // 更新 LFSR，使用反饋多項式 (x^24 + x^22 + x^2 + x + 1)
            lfsr <= {lfsr[22:0], lfsr[23] ^ lfsr[21] ^ lfsr[1] ^ lfsr[0]};  // 擴展到24位LFSR
        end
    end

    // 隨機數的生成：將計數器、LFSR組合，並進行多次異或來提高隨機性
    assign rand_out = (counter[1:0] ^ counter2[1:0] ^ lfsr[1:0]); // 生成 2 位隨機數
endmodule

module led_matrix_controller(
    input wire clk,
    input wire rst,
	 input wire gameover,
    output reg [7:0] led_matrix [7:0] // 8x8 LED 矩陣輸出
);

    wire [1:0] rand_group; // 隨機選擇一組 (0~3)
    reg [7:0] matrix [7:0];
    integer i, j;

    // LFSR 模組（隨機生成 0~3）
    lfsr_2bit lfsr_inst (clk,clk22,rst,rand_group);

    // 矩陣初始化
    initial begin
        for (i = 0; i < 8; i = i + 1) begin
            matrix[i] = 8'b11111111; // 預設全部熄滅
        end
    end

    // LED 下移 (實際是右移)
    always @(posedge clk or posedge rst) begin
        if (rst) begin
            for (i = 0; i < 8; i = i + 1) begin
                matrix[i] <= 8'b11111111;
            end
        end else if(gameover)begin
		   for (i = 0; i < 8; i = i + 1) begin
                matrix[i] <= 8'b00000000;
            end
				end
		else begin
            // 每列右移 (模擬城市燈號下移)
            for (j = 0; j < 8; j = j + 1) begin
                matrix[j] <= {matrix[j][6:0],1'b1}; // 每列右移，最高位補1
            end

            // 在最左邊注入隨機選擇的燈號
            case (rand_group)
                2'b00:begin matrix[0][0] <=1'b0; matrix[1][0] <=1'b0;end
                2'b01:begin matrix[2][0] <=1'b0; matrix[3][0] <=1'b0;end
                2'b10:begin matrix[4][0] <=1'b0; matrix[5][0] <=1'b0;end
                2'b11:begin matrix[6][0] <=1'b0; matrix[7][0] <=1'b0;end
            endcase
        end
    end

    // 輸出到 LED 矩陣
    always @(*) begin
        for (i = 0; i < 8; i = i + 1) begin
            led_matrix[i] = matrix[i];
        end
    end
endmodule

module divfreq(input clk,output reg clk_div);
reg [24:0] count;
always @(posedge clk)
	begin
		if(count>25000)
		begin
			count <=25'b0;
			clk_div <= ~clk_div;
			end
		else
			count <= count +1'b1;
		end
endmodule 
